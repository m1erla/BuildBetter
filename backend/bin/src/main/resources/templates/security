spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.hibernate.show-sql=true
spring.datasource.url=jdbc:postgresql://localhost:5432/rentACar
spring.datasource.username=postgres
spring.datasource.password=mierla
spring.jpa.properties.javax.persistence.validation.mode = none

                @GetMapping("/profile")
                     public ResponseEntity<Object> retrieveUserProfileWithJwt(@RequestHeader("Authorization") String authorizationHeader) {
                         // Extract the token from the Authorization header (remove "Bearer " prefix)
                         String jwt = authorizationHeader.substring(7).trim();

                         String email = jwtService.extractUsername(jwt);
                         return EntityResponse.generateResponse("User Profile", HttpStatus.OK, userService.getByEmail(email));
                     }

                     //    @RequestMapping(value = "/authenticater", method = RequestMethod.POST)
                     //    public ResponseEntity<Object> createAuthenticationToken(@RequestBody AuthenticationRequest authenticationRequest)
                     //            throws Exception {
                     //
                     //        try {
                     //            authenticate(authenticationRequest.getEmail(), authenticationRequest.getPassword());
                     //        } catch (Exception e) {
                     //            return EntityResponse.generateResponse("Authentication", HttpStatus.UNAUTHORIZED,
                     //                    "Invalid credentials, please check details and try again.");
                     //        }
                     //        final UserDetails userDetails = userService.loadUserByUsername(authenticationRequest.getEmail());
                     //
                     //        final String accessToken = jwtService.generateToken(userDetails);
                     //        final String refreshToken = jwtService.generateRefreshToken(userDetails);
                     //
                     //        return EntityResponse.generateResponse("Authentication", HttpStatus.OK,
                     //                new AuthenticationResponse(accessToken));
                     //
                     //    }
                     //    private void authenticate(String email, String password) throws Exception {
                     //        try {
                     //           authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(email, password));
                     //        } catch (DisabledException e) {
                     //            throw new Exception("USER_DISABLED", e);
                     //        } catch (BadCredentialsException e) {
                     //            throw new Exception("INVALID_CREDENTIALS", e);
                     //        }catch(Exception e) {
                     //            throw new Exception("INVALID_CREDENTIALS", e.getCause());
                     //
                     //        }
                     //    }
                     //
                     //
                     //    @PostMapping("/registered")
                     //    public ResponseEntity<Object> registered(@RequestBody RegisterRequest request){
                     //        request.setPassword(passwordEncoder.encode(request.getPassword()));
                     //        return EntityResponse.generateResponse("Register User", HttpStatus.OK, service.register(request));
                     //    }